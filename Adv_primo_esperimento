{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Adv_primo_esperimento","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNSEEyBYTj99uHKJZsdPGnz"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"JQ0OquEaofLW","colab_type":"code","outputId":"a16321c8-89d6-4c55-cdbe-8279766a1ce4","executionInfo":{"status":"ok","timestamp":1588152944966,"user_tz":-120,"elapsed":2036,"user":{"displayName":"unipg lab1","photoUrl":"","userId":"10726678829253529683"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["from google.colab import drive\n","import sys\n","import os\n","drive.mount('/content/gdrive')\n","path=(\"/content/gdrive/My Drive/Colab notebook esperimento tesi\")\n","os.chdir(path)\n","print(os.getcwd())\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n","/content/gdrive/My Drive/Colab notebook esperimento tesi\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VYFibK4qqtSp","colab_type":"code","outputId":"42b2bd65-874b-40b0-ad49-1aa658713d8b","executionInfo":{"status":"error","timestamp":1588082834794,"user_tz":-120,"elapsed":1868727,"user":{"displayName":"unipg lab1","photoUrl":"","userId":"10726678829253529683"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["\n","# cnn model with batch normalization for mnist\n","from numpy import mean\n","from numpy import std\n","from matplotlib import pyplot\n","from sklearn.model_selection import KFold\n","from keras.datasets import mnist\n","from keras.utils import to_categorical\n","from keras.models import Sequential\n","from keras.models import *\n","from keras.layers import Conv2D\n","from keras.layers import MaxPooling2D\n","from keras.layers import Dense\n","from keras.layers import Flatten\n","from keras.optimizers import SGD\n","from keras.layers import BatchNormalization\n"," \n","# load train and test dataset\n","def load_dataset():\n","\t# load dataset\n","\t(trainX, trainY), (testX, testY) = mnist.load_data()\n","\t# reshape dataset to have a single channel\n","\ttrainX = trainX.reshape((trainX.shape[0], 28, 28, 1))\n","\ttestX = testX.reshape((testX.shape[0], 28, 28, 1))\n","\t# one hot encode target values\n","\ttrainY = to_categorical(trainY)\n","\ttestY = to_categorical(testY)\n","\treturn trainX, trainY, testX, testY\n"," \n","# scale pixels\n","def prep_pixels(train, test):\n","\t# convert from integers to floats\n","\ttrain_norm = train.astype('float32')\n","\ttest_norm = test.astype('float32')\n","\t# normalize to range 0-1\n","\ttrain_norm = train_norm / 255.0\n","\ttest_norm = test_norm / 255.0\n","\t# return normalized images\n","\treturn train_norm, test_norm\n"," \n","# define cnn model\n","def define_model():\n","\tmodel = Sequential()\n","\tmodel.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', input_shape=(28, 28, 1)))\n","\tmodel.add(BatchNormalization())\n","\tmodel.add(MaxPooling2D((2, 2)))\n","\tmodel.add(Flatten())\n","\tmodel.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))\n","\tmodel.add(BatchNormalization())\n","\tmodel.add(Dense(10, activation='softmax'))\n","\t# compile model\n","\topt = SGD(lr=0.01, momentum=0.9)\n","\tmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n","\treturn model\n"," \n","# evaluate a model using k-fold cross-validation\n","def evaluate_model(dataX, dataY, n_folds=5):\n","\tscores, histories = list(), list()\n","\t# prepare cross validation\n","\tkfold = KFold(n_folds, shuffle=True, random_state=1)\n","\t# enumerate splits\n","\tfor train_ix, test_ix in kfold.split(dataX):\n","\t\t# define model\n","\t\tmodel = define_model()\n","\t\t# select rows for train and test\n","\t\ttrainX, trainY, testX, testY = dataX[train_ix], dataY[train_ix], dataX[test_ix], dataY[test_ix]\n","\t\t# fit model\n","\t\tmodel= load_model('final_model.h5')\n","\t\thistory = model.fit(trainX, trainY, epochs=20, batch_size=32, validation_data=(testX, testY), verbose=1)\n","\t\t# evaluate model\n","\t\t_, acc = model.evaluate(testX, testY, verbose=0)\n","\t\tprint('> %.3f' % (acc * 100.0))\n","\t\t# stores scores\n","\t\tscores.append(acc)\n","\t\thistories.append(history)\n","\t\tmodel.save('final_model.h5')\n","\t\tprint(\"modello salvato\")\n","\treturn scores, histories\n"," \n","# plot diagnostic learning curves\n","def summarize_diagnostics(histories):\n","\tfor i in range(len(histories)):\n","\t\t# plot loss\n","\t\tpyplot.subplot(2, 1, 1)\n","\t\tpyplot.title('Cross Entropy Loss')\n","\t\tpyplot.plot(histories[i].history['loss'], color='blue', label='train')\n","\t\tpyplot.plot(histories[i].history['val_loss'], color='orange', label='test')\n","\t\t# plot accuracy\n","\t\tpyplot.subplot(2, 1, 2)\n","\t\tpyplot.title('Classification Accuracy')\n","\t\tpyplot.plot(histories[i].history['accuracy'], color='blue', label='train')\n","\t\tpyplot.plot(histories[i].history['val_accuracy'], color='orange', label='test')\n","\tpyplot.show()\n"," \n","# summarize model performance\n","def summarize_performance(scores):\n","\t# print summary\n","\tprint('Accuracy: mean=%.3f std=%.3f, n=%d' % (mean(scores)*100, std(scores)*100, len(scores)))\n","\t# box and whisker plots of results\n","\tpyplot.boxplot(scores)\n","\tpyplot.show()\n"," \n","# run the test harness for evaluating a model\n","def run_test_harness():\n","\t# load dataset\n","\ttrainX, trainY, testX, testY = load_dataset()\n","\t# prepare pixel data\n","\ttrainX, testX = prep_pixels(trainX, testX)\n","\t# evaluate model\n","\tscores, histories = evaluate_model(trainX, trainY)\n","\t# learning curves\n","\tsummarize_diagnostics(histories)\n","\t# summarize estimated performance\n","\tsummarize_performance(scores)\n"," \n","# entry point, run the test harness\n","run_test_harness()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Train on 48000 samples, validate on 12000 samples\n","Epoch 1/20\n","48000/48000 [==============================] - 41s 852us/step - loss: 1.9978e-04 - accuracy: 1.0000 - val_loss: 1.1714e-05 - val_accuracy: 1.0000\n","Epoch 2/20\n","48000/48000 [==============================] - 40s 823us/step - loss: 2.6540e-04 - accuracy: 0.9999 - val_loss: 9.9276e-06 - val_accuracy: 1.0000\n","Epoch 3/20\n","48000/48000 [==============================] - 39s 819us/step - loss: 3.4216e-04 - accuracy: 0.9999 - val_loss: 8.8184e-05 - val_accuracy: 1.0000\n","Epoch 4/20\n","48000/48000 [==============================] - 40s 841us/step - loss: 1.8633e-04 - accuracy: 1.0000 - val_loss: 2.3326e-05 - val_accuracy: 1.0000\n","Epoch 5/20\n","48000/48000 [==============================] - 40s 836us/step - loss: 9.7205e-05 - accuracy: 1.0000 - val_loss: 1.5473e-05 - val_accuracy: 1.0000\n","Epoch 6/20\n","48000/48000 [==============================] - 38s 801us/step - loss: 1.1532e-04 - accuracy: 1.0000 - val_loss: 1.6440e-05 - val_accuracy: 1.0000\n","Epoch 7/20\n","48000/48000 [==============================] - 42s 876us/step - loss: 1.2541e-04 - accuracy: 1.0000 - val_loss: 2.1213e-05 - val_accuracy: 1.0000\n","Epoch 8/20\n","48000/48000 [==============================] - 39s 803us/step - loss: 9.2103e-05 - accuracy: 1.0000 - val_loss: 1.3026e-05 - val_accuracy: 1.0000\n","Epoch 9/20\n","48000/48000 [==============================] - 41s 846us/step - loss: 9.6841e-05 - accuracy: 1.0000 - val_loss: 1.4832e-05 - val_accuracy: 1.0000\n","Epoch 10/20\n","48000/48000 [==============================] - 40s 831us/step - loss: 6.1176e-05 - accuracy: 1.0000 - val_loss: 1.2963e-05 - val_accuracy: 1.0000\n","Epoch 11/20\n","48000/48000 [==============================] - 40s 832us/step - loss: 1.0057e-04 - accuracy: 1.0000 - val_loss: 2.3719e-05 - val_accuracy: 1.0000\n","Epoch 12/20\n","48000/48000 [==============================] - 44s 923us/step - loss: 1.0791e-04 - accuracy: 1.0000 - val_loss: 1.2551e-05 - val_accuracy: 1.0000\n","Epoch 13/20\n","48000/48000 [==============================] - 42s 872us/step - loss: 1.2979e-04 - accuracy: 1.0000 - val_loss: 3.3052e-05 - val_accuracy: 1.0000\n","Epoch 14/20\n","48000/48000 [==============================] - 40s 824us/step - loss: 1.2230e-04 - accuracy: 1.0000 - val_loss: 2.4550e-05 - val_accuracy: 1.0000\n","Epoch 15/20\n","48000/48000 [==============================] - 38s 794us/step - loss: 1.1056e-04 - accuracy: 1.0000 - val_loss: 2.4213e-05 - val_accuracy: 1.0000\n","Epoch 16/20\n","48000/48000 [==============================] - 37s 781us/step - loss: 1.9573e-04 - accuracy: 0.9999 - val_loss: 6.3737e-05 - val_accuracy: 1.0000\n","Epoch 17/20\n","48000/48000 [==============================] - 38s 788us/step - loss: 1.4685e-04 - accuracy: 1.0000 - val_loss: 3.4706e-05 - val_accuracy: 1.0000\n","Epoch 18/20\n","48000/48000 [==============================] - 39s 803us/step - loss: 1.5310e-04 - accuracy: 1.0000 - val_loss: 2.1667e-05 - val_accuracy: 1.0000\n","Epoch 19/20\n","48000/48000 [==============================] - 39s 809us/step - loss: 2.4547e-04 - accuracy: 0.9999 - val_loss: 4.5567e-05 - val_accuracy: 1.0000\n","Epoch 20/20\n","48000/48000 [==============================] - 39s 820us/step - loss: 1.7990e-04 - accuracy: 1.0000 - val_loss: 2.3237e-05 - val_accuracy: 1.0000\n","> 100.000\n","modello salvato\n","Train on 48000 samples, validate on 12000 samples\n","Epoch 1/20\n","48000/48000 [==============================] - 40s 834us/step - loss: 3.3198e-04 - accuracy: 0.9999 - val_loss: 7.3248e-06 - val_accuracy: 1.0000\n","Epoch 2/20\n","48000/48000 [==============================] - 40s 831us/step - loss: 1.8095e-04 - accuracy: 1.0000 - val_loss: 1.1642e-05 - val_accuracy: 1.0000\n","Epoch 3/20\n","48000/48000 [==============================] - 39s 816us/step - loss: 1.2722e-04 - accuracy: 1.0000 - val_loss: 7.3117e-06 - val_accuracy: 1.0000\n","Epoch 4/20\n","48000/48000 [==============================] - 40s 831us/step - loss: 1.3606e-04 - accuracy: 1.0000 - val_loss: 1.5774e-05 - val_accuracy: 1.0000\n","Epoch 5/20\n","48000/48000 [==============================] - 41s 845us/step - loss: 1.5539e-04 - accuracy: 1.0000 - val_loss: 7.0056e-06 - val_accuracy: 1.0000\n","Epoch 6/20\n","48000/48000 [==============================] - 41s 845us/step - loss: 9.2773e-05 - accuracy: 1.0000 - val_loss: 5.4203e-06 - val_accuracy: 1.0000\n","Epoch 7/20\n","48000/48000 [==============================] - 47s 971us/step - loss: 1.8745e-04 - accuracy: 1.0000 - val_loss: 7.8310e-06 - val_accuracy: 1.0000\n","Epoch 8/20\n","48000/48000 [==============================] - 44s 915us/step - loss: 1.1978e-04 - accuracy: 1.0000 - val_loss: 6.8245e-06 - val_accuracy: 1.0000\n","Epoch 9/20\n","48000/48000 [==============================] - 46s 950us/step - loss: 9.9421e-05 - accuracy: 1.0000 - val_loss: 7.0917e-06 - val_accuracy: 1.0000\n","Epoch 10/20\n","48000/48000 [==============================] - 47s 987us/step - loss: 1.1198e-04 - accuracy: 1.0000 - val_loss: 7.0652e-06 - val_accuracy: 1.0000\n","Epoch 11/20\n","48000/48000 [==============================] - 49s 1ms/step - loss: 9.0875e-05 - accuracy: 1.0000 - val_loss: 6.6950e-06 - val_accuracy: 1.0000\n","Epoch 12/20\n","48000/48000 [==============================] - 45s 941us/step - loss: 6.7554e-05 - accuracy: 1.0000 - val_loss: 6.5970e-06 - val_accuracy: 1.0000\n","Epoch 13/20\n","48000/48000 [==============================] - 47s 970us/step - loss: 6.9862e-05 - accuracy: 1.0000 - val_loss: 6.2143e-06 - val_accuracy: 1.0000\n","Epoch 14/20\n","48000/48000 [==============================] - 47s 977us/step - loss: 1.8992e-04 - accuracy: 1.0000 - val_loss: 1.0687e-05 - val_accuracy: 1.0000\n","Epoch 15/20\n","48000/48000 [==============================] - 48s 994us/step - loss: 8.5031e-05 - accuracy: 1.0000 - val_loss: 6.5939e-06 - val_accuracy: 1.0000\n","Epoch 16/20\n","48000/48000 [==============================] - 46s 948us/step - loss: 4.1752e-04 - accuracy: 0.9999 - val_loss: 7.4355e-05 - val_accuracy: 1.0000\n","Epoch 17/20\n","48000/48000 [==============================] - 44s 920us/step - loss: 1.6424e-04 - accuracy: 1.0000 - val_loss: 9.7988e-06 - val_accuracy: 1.0000\n","Epoch 18/20\n","48000/48000 [==============================] - 45s 933us/step - loss: 2.2550e-04 - accuracy: 0.9999 - val_loss: 2.3263e-05 - val_accuracy: 1.0000\n","Epoch 19/20\n","48000/48000 [==============================] - 48s 990us/step - loss: 2.4762e-04 - accuracy: 0.9999 - val_loss: 1.3684e-05 - val_accuracy: 1.0000\n","Epoch 20/20\n","48000/48000 [==============================] - 47s 983us/step - loss: 2.8347e-04 - accuracy: 0.9999 - val_loss: 5.7437e-05 - val_accuracy: 1.0000\n","> 100.000\n","modello salvato\n","Train on 48000 samples, validate on 12000 samples\n","Epoch 1/20\n","48000/48000 [==============================] - 44s 906us/step - loss: 3.8106e-04 - accuracy: 0.9999 - val_loss: 7.1578e-04 - val_accuracy: 0.9999\n","Epoch 2/20\n","48000/48000 [==============================] - 46s 955us/step - loss: 2.9483e-04 - accuracy: 0.9999 - val_loss: 6.5385e-04 - val_accuracy: 0.9999\n","Epoch 3/20\n","48000/48000 [==============================] - 44s 923us/step - loss: 1.8111e-04 - accuracy: 1.0000 - val_loss: 8.5189e-04 - val_accuracy: 0.9999\n","Epoch 4/20\n","48000/48000 [==============================] - 44s 916us/step - loss: 1.3682e-04 - accuracy: 1.0000 - val_loss: 9.1672e-04 - val_accuracy: 0.9999\n","Epoch 5/20\n","48000/48000 [==============================] - 43s 888us/step - loss: 1.8008e-04 - accuracy: 1.0000 - val_loss: 2.3961e-05 - val_accuracy: 1.0000\n","Epoch 6/20\n","48000/48000 [==============================] - 44s 916us/step - loss: 1.7281e-04 - accuracy: 1.0000 - val_loss: 3.5619e-04 - val_accuracy: 0.9999\n","Epoch 7/20\n","48000/48000 [==============================] - 44s 926us/step - loss: 7.4695e-05 - accuracy: 1.0000 - val_loss: 8.4601e-04 - val_accuracy: 0.9999\n","Epoch 8/20\n","48000/48000 [==============================] - 44s 922us/step - loss: 7.9725e-05 - accuracy: 1.0000 - val_loss: 5.1837e-04 - val_accuracy: 0.9999\n","Epoch 9/20\n","48000/48000 [==============================] - 45s 940us/step - loss: 1.8764e-04 - accuracy: 1.0000 - val_loss: 0.0010 - val_accuracy: 0.9998\n","Epoch 10/20\n","42816/48000 [=========================>....] - ETA: 4s - loss: 1.7080e-04 - accuracy: 0.9999"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rp76_L1TDxc_","colab_type":"code","colab":{}},"source":["from google.colab import drive\n","import sys\n","import os\n","drive.mount('/content/gdrive')\n","path=(\"/content/gdrive/My Drive/Colab notebook esperimento tesi\")\n","os.chdir(path)\n","print(os.getcwd())"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kcs497Ks1zay","colab_type":"code","colab":{}},"source":["\n","# make a prediction for a new image.\n","from keras.preprocessing.image import load_img\n","from keras.preprocessing.image import img_to_array\n","from keras.models import load_model\n","import matplotlib.pyplot as plt\n","# load and prepare the image\n","def load_image(filename):\n","  # load the image\n","  img = load_img(filename,color_mode = \"grayscale\", target_size=(28, 28))\n","  plt.imshow(img)\n","  plt.show()\n","  # convert to array\n","  img = img_to_array(img)\n","  # reshape into a single sample with 1 channel\n","  img = img.reshape(1, 28, 28, 1)\n","  # prepare pixel data\n","  img = img.astype('float32')\n","  img = img / 255.0\n","  return img\n"," \n","# load an image and predict the class\n","def run_example():\n","  # load the image\n","  img1 = load_image('nove.png')\n","  \n","    # load model\n","  model = load_model('final_model.h5')\n","  # predict the class\n","  digit1 = model.predict_classes(img1)\n","  \n","  print(\"l'immagine corrisponde al numero \"+str(digit1))\n","  \n","  # entry point, run the example\n","run_example()"],"execution_count":0,"outputs":[]}]}